{"name":"Ghostdriver","tagline":"Ghost Driver is an implementation of the Remote WebDriver Wire protocol, using PhantomJS as back-end","body":"# Ghost Driver\r\n\r\nGhost Driver is a pure JavaScript implementation of the\r\n[WebDriver Wire Protocol](http://code.google.com/p/selenium/wiki/JsonWireProtocol)\r\nfor [PhantomJS](http://phantomjs.org/).\r\nIt's a Remote WebDriver that uses PhantomJS as back-end.\r\n\r\n**GhostDriver is designed to be integral part of PhantomJS itself, but it's developed in isolation and progress is tracked\r\nby this Repository.**\r\n\r\n* Current _GhostDriver_ stable version:\r\nsee [releases](https://github.com/detro/ghostdriver/releases)\r\n* Current _PhantomJS-integrated_ version is `\"1.0.4\"`:\r\ncontained in PhantomJS `\"1.9.2\"`\r\n* Current _PhantomJSDriver Java bindings_ stable version: see\r\n[Maven](http://mvnrepository.com/artifact/com.github.detro.ghostdriver/phantomjsdriver)\r\n\r\nFor more info, please take a look at the [changelog](https://github.com/detro/ghostdriver/blob/master/CHANGELOG.md).\r\n\r\nThe project was created and is lead by [Ivan De Marino](https://github.com/detro).\r\n\r\n## Setup\r\n\r\n* Download latest stable PhantomJS from [here](http://phantomjs.org/download.html)\r\n* Selenium version `\">= 2.33.0`\"\r\n\r\n**THAT'S IT!!** Because of latest stable GhostDriver being embedded in PhantomJS,\r\nyou shouldn't need anything else to get started.\r\n\r\n## Register GhostDriver with a Selenium Grid hub\r\n\r\n1. Launch the grid server, which listens on 4444 by default: `java -jar /path/to/selenium-server-standalone-<SELENIUM VERSION>.jar -role hub`\r\n2. Register with the hub: `phantomjs --webdriver=8080 --webdriver-selenium-grid-hub=http://127.0.0.1:4444`\r\n3. Now you can use your normal webdriver client with `http://127.0.0.1:4444` and just request `browserName: phantomjs`\r\n\r\n## (Java) Bindings\r\n\r\nThis project provides WebDriver bindings for Java under the name _PhantomJSDriver_.\r\n[Here is the JavaDoc](http://cdn.ivandemarino.me/phantomjsdriver-javadoc/index.html).\r\n\r\nBindings for other languages (C#, Python, Ruby, ...) are developed and maintained\r\nunder the same name within the [Selenium project](http://docs.seleniumhq.org/docs/) itself.\r\n\r\n### Include Java Bindings in your Maven project\r\n\r\nJust add the following to your `pom.xml`:\r\n\r\n```xml\r\n<dependency>\r\n    <groupId>com.github.detro.ghostdriver</groupId>\r\n    <artifactId>phantomjsdriver</artifactId>\r\n    <version>LATEST_VERSION_HERE</version>\r\n</dependency>\r\n```\r\n\r\n### Include Java Bindings in your Gradle project\r\n\r\nJust add the following to your `build.gradle`:\r\n\r\n```gradle\r\ndependencies {\r\n    ...\r\n    testCompile \"com.github.detro.ghostdriver:phantomjsdriver:1.0.4\"\r\n    ...\r\n}\r\n```\r\n\r\n### Alternative: how to use it via `RemoteWebDriver`\r\n\r\nLaunching PhantomJS in Remote WebDriver mode it's simple:\r\n```bash\r\n$ phantomjs --webdriver=PORT\r\n```\r\nOnce started, you can use any `RemoteWebDriver` implementation to send commands to it. I advice to take a look to the\r\n`/test` directory for examples.\r\n\r\n## F.A.Q.\r\n\r\n### What extra WebDriver `capabilities` GhostDriver offers?\r\n* GhostDriver extra Capabilities\r\n    * `phantomjs.page.settings.SETTING = VALUE` - Configure `page.settings`\r\n    on PhantomJS internal page objects (_windows_ in WebDriver context)\r\n    (see [reference](https://github.com/ariya/phantomjs/wiki/API-Reference-WebPage#wiki-webpage-settings))\r\n    * `phantomjs.page.customHeaders.HEADER = VALUE` - Add extra HTTP Headers\r\n    when loading a URL\r\n    (see [reference](https://github.com/ariya/phantomjs/wiki/API-Reference-WebPage#wiki-webpage-customHeaders))\r\n* PhantomJSDriver (Java-binding) Capabilities\r\n    * `phantomjs.binary.path` - Specify path to PhantomJS executable to use\r\n    * `phantomjs.ghostdriver.path` - Specify path to GhostDriver `main/src.js`\r\n    script to use; allows to use a different version of GhostDriver then the one\r\n    embed in PhantomJS\r\n    * `phantomjs.cli.args` - Specify command line arguments to pass to the\r\n    PhantomJS executable\r\n    * `phantomjs.ghostdriver.cli.args` - Specify command line argument to pass to\r\n    GhostDriver (works only in tandem with `phantomjs.ghostdriver.path`)\r\n\r\n## Want to help? Read on!\r\n\r\n### Run validation the tests\r\n\r\nHere I show how to clone this repo and kick start the (Java) tests. You need\r\n[Java SDK](http://www.oracle.com/technetwork/java/javase/downloads/index.html)\r\nto run them (I tested it with Java 7, but should work with Java 6 too).\r\n\r\n1. `git clone https://github.com/detro/ghostdriver.git`\r\n2. Configure `phantomjs_exec_path` inside `ghostdriver/test/config.ini` to point at the build of PhantomJS you just did\r\n3. `cd ghostdriver/test/java; ./gradlew test`\r\n\r\n#### Alternative: Run GhostDriver yourself and launch tests against that instance\r\n\r\n1. `phantomjs --webdriver=PORT`\r\n2. Configure `driver` inside `ghostdriver/test/config.ini` to point at the URL `http://localhost:PORT`\r\n3. `cd ghostdriver/test/java; ./gradlew test`\r\n\r\n### Project Directory Structure\r\n\r\nHere follows the output of the `tree -hd -L 3` command, trimmed of files and \"build directories\":\r\n\r\n```bash\r\n.\r\n├── [ 102]  binding\r\n│   └── [ 510]  java\r\n│       ├── [ 204]  build\r\n│       ├── [ 136]  gradle\r\n│       ├── [ 884]  jars            <--- JARs containing Binding, related Source and related JavaDoc\r\n│       └── [ 102]  src             <--- Java Binding Source\r\n├── [ 442]  src                     <--- GhostDriver JavaScript core source\r\n│   ├── [ 306]  request_handlers    <--- JavaScript \"classes/functions\" that handle HTTP Requests\r\n│   └── [ 204]  third_party         <--- Third party/utility code\r\n│       └── [2.0K]  webdriver-atoms <--- WebDriver Atoms, automatically imported from the Selenium project\r\n├── [ 204]  test\r\n│   ├── [ 476]  java                <--- Java Tests\r\n│   │   ├── [ 136]  gradle\r\n│   │   ├── [ 136]  out\r\n│   │   └── [ 102]  src\r\n│   ├── [ 238]  python              <--- Python Tests\r\n│   │   └── [ 102]  utils\r\n│   └── [ 340]  testcase-issue_240\r\n└── [ 238]  tools                   <--- Tools (import/export)\r\n    └── [ 136]  atoms_build_dir\r\n\r\n20 directories\r\n```\r\n\r\n### WebDriver Atoms\r\n\r\nBeing GhostDriver a WebDriver implementation, it embeds the standard/default WebDriver Atoms to operate inside open\r\nwebpages. In the specific, the Atoms cover scenarios where the \"native\" PhantomJS `require('webpage')` don't stretch.\r\n\r\nDocumentation about how those work can be found [here](http://code.google.com/p/selenium/wiki/AutomationAtoms)\r\nand [here](http://www.aosabook.org/en/selenium.html).\r\n\r\nHow are those Atoms making their way into GhostDriver? If you look inside the `/tools` directory you can find a bash\r\nscript: `/tools/import_atoms.sh`. That script accepts the path to a Selenium local repo, runs the\r\n[CrazyFunBuild](http://code.google.com/p/selenium/wiki/CrazyFunBuild) to produce the compressed/minified Atoms,\r\ngrabs those and copies them over to the `/src/third_party/webdriver-atoms` directory.\r\n\r\nThe Atoms original source lives inside the Selenium repo in the subtree of `/javascript`. To understand how the build\r\nworks, you need to spend a bit of time reading about\r\n[CrazyFunBuild](http://code.google.com/p/selenium/wiki/CrazyFunBuild): worth your time if you want to contribute to\r\nGhostDriver (or any WebDriver, as a matter of fact).\r\n\r\nOne thing it's important to mention, is that CrazyFunBuild relies on the content of `build.desc` file to understand\r\nwhat and how to build it. Those files define what exactly is built and what it depends on. In the case of the Atoms,\r\nthe word \"build\" means \"run Google Closure Compiler over a set of files and compress functions into Atoms\".\r\nThe definition of the Atoms that GhostDriver uses lives at `/tools/atoms_build_dir/build.desc`.\r\n\r\nLet's take this small portion of our `build.desc`:\r\n```\r\njs_deps(name = \"deps\",\r\n  srcs = \"*.js\",\r\n  deps = [\"//javascript/atoms:deps\",\r\n          \"//javascript/webdriver/atoms:deps\"])\r\n\r\njs_fragment(name = \"get_element_from_cache\",\r\n  module = \"bot.inject.cache\",\r\n  function = \"bot.inject.cache.getElement\",\r\n  deps = [ \"//javascript/atoms:deps\" ])\r\n\r\njs_deps(name = \"build_atoms\",\r\n  deps = [\r\n    ...\r\n    \"//javascript/webdriver/atoms:execute_script\",\r\n    ...\r\n  ]\r\n```\r\nThe first part (`js_deps(name = \"deps\"...`) declares what are the dependency of this `build.desc`: with that CrazyFunBuild knows\r\nwhat to build before fulfilling our build.\r\n\r\nThe second part (`js_fragment(...`) defines an Atom: the `get_element_from_cache` is going to be the name of\r\nan Atom to build; it can be found in the module `bot.inject.cache` and is realised by the function named\r\n`bot.inject.cache.getElement`.\r\n\r\nThe third part (`js_deps(name = \"build_atoms\"...`) is a list of the Atoms (either defined by something like the second\r\npart or in one of the files we declared as dependency) that we want to build.\r\n\r\nIf you reached this stage in understanding the Atoms, you are ready to go further by yourself.\r\n\r\n### Contributions and/or Bug Report\r\n\r\nYou can contribute by testing GhostDriver, reporting bugs and issues, or submitting Pull Requests.\r\nAny **help is welcome**, but bear in mind the following base principles:\r\n\r\n* Issue reporting requires a reproducible example, otherwise will most probably be **closed without warning**\r\n* Squash your commits by theme: I prefer a clean, readable log\r\n* Maintain consistency with the code-style you are surrounded by\r\n* If you are going to make a big, substantial change, let's discuss it first\r\n* I **HATE** CoffeeScript: assume I'm going to laugh off any \"contribution\" that contains such _aberrating crap_!\r\n* Open Source is NOT a democracy (and I mean it!)\r\n\r\n## License\r\nGhostDriver is distributed under [BSD License](http://www.opensource.org/licenses/BSD-2-Clause).\r\n\r\n## Release names\r\nSee [here](http://en.wikipedia.org/wiki/List_of_ghosts).\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}